services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: fastapi-notes:latest
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - APP_LOG_FILE=/var/log/app/app.jsonl
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('127.0.0.1',8000)); print('ok')"]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - app_logs:/var/log/app

  nginx:
    image: nginx:1.25-alpine
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: notes
      POSTGRES_PASSWORD: notes
      POSTGRES_DB: notes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notes -d notes"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data

  alloy:
    image: grafana/alloy:latest
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    # mount only container-internal log volumes (no host mounts)
    volumes:
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
      - alloy_data:/var/lib/alloy/data
      - ./alloy/config.alloy:/etc/alloy/config.alloy:ro
    ports:
      - "12345:12345" # Alloy UI and readiness on host:12345

volumes:
  app_logs:    # stores /var/log/app/ from the app container
  nginx_logs:  # stores /var/log/nginx/ from the nginx container
  alloy_data:  # Alloy state (positions, WAL)
  pg_data:     # db store
